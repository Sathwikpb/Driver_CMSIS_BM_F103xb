
I2C_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b0  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e0  080004e8  000014e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e0  080004e0  000014e8  2**0
                  CONTENTS
  4 .ARM          00000000  080004e0  080004e0  000014e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e0  080004e8  000014e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e0  080004e0  000014e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004e4  080004e4  000014e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004e8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004e8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000582  00000000  00000000  00001511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000020a  00000000  00000000  00001a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00001ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000006b  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff61  00000000  00000000  00001dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e12  00000000  00000000  00011d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053f66  00000000  00000000  00012b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066a84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000019c  00000000  00000000  00066ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00066c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004c8 	.word	0x080004c8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004c8 	.word	0x080004c8

08000170 <I2C1_Init>:
#include "i2c.h"

void I2C1_Init(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    // Enable I2C1 and GPIOB clocks
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000174:	4b1a      	ldr	r3, [pc, #104]	@ (80001e0 <I2C1_Init+0x70>)
 8000176:	69db      	ldr	r3, [r3, #28]
 8000178:	4a19      	ldr	r2, [pc, #100]	@ (80001e0 <I2C1_Init+0x70>)
 800017a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800017e:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000180:	4b17      	ldr	r3, [pc, #92]	@ (80001e0 <I2C1_Init+0x70>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a16      	ldr	r2, [pc, #88]	@ (80001e0 <I2C1_Init+0x70>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]

    // Configure PB6 (SCL) and PB7 (SDA) as Alternate Function Open-Drain
    GPIOB->CRL &= ~((0xF << 24) | (0xF << 28));
 800018c:	4b15      	ldr	r3, [pc, #84]	@ (80001e4 <I2C1_Init+0x74>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a14      	ldr	r2, [pc, #80]	@ (80001e4 <I2C1_Init+0x74>)
 8000192:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000196:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= ((0xB << 24) | (0xB << 28));
 8000198:	4b12      	ldr	r3, [pc, #72]	@ (80001e4 <I2C1_Init+0x74>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a11      	ldr	r2, [pc, #68]	@ (80001e4 <I2C1_Init+0x74>)
 800019e:	f043 433b 	orr.w	r3, r3, #3137339392	@ 0xbb000000
 80001a2:	6013      	str	r3, [r2, #0]

    // Reset I2C1
    I2C1->CR1 |= I2C_CR1_SWRST;
 80001a4:	4b10      	ldr	r3, [pc, #64]	@ (80001e8 <I2C1_Init+0x78>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a0f      	ldr	r2, [pc, #60]	@ (80001e8 <I2C1_Init+0x78>)
 80001aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80001ae:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= ~I2C_CR1_SWRST;
 80001b0:	4b0d      	ldr	r3, [pc, #52]	@ (80001e8 <I2C1_Init+0x78>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a0c      	ldr	r2, [pc, #48]	@ (80001e8 <I2C1_Init+0x78>)
 80001b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80001ba:	6013      	str	r3, [r2, #0]

    // Configure Clock (100kHz Standard Mode, PCLK1 = 8MHz)
    I2C1->CR2 = 8;  // APB1 clock = 8MHz
 80001bc:	4b0a      	ldr	r3, [pc, #40]	@ (80001e8 <I2C1_Init+0x78>)
 80001be:	2208      	movs	r2, #8
 80001c0:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 40; // (8MHz / 100kHz) / 2 = 40
 80001c2:	4b09      	ldr	r3, [pc, #36]	@ (80001e8 <I2C1_Init+0x78>)
 80001c4:	2228      	movs	r2, #40	@ 0x28
 80001c6:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 9; // (8MHz * 1Âµs) + 1 = 9
 80001c8:	4b07      	ldr	r3, [pc, #28]	@ (80001e8 <I2C1_Init+0x78>)
 80001ca:	2209      	movs	r2, #9
 80001cc:	621a      	str	r2, [r3, #32]

    // Enable I2C1, Enable ACK
    I2C1->CR1 = I2C_CR1_PE | I2C_CR1_ACK;
 80001ce:	4b06      	ldr	r3, [pc, #24]	@ (80001e8 <I2C1_Init+0x78>)
 80001d0:	f240 4201 	movw	r2, #1025	@ 0x401
 80001d4:	601a      	str	r2, [r3, #0]
}
 80001d6:	bf00      	nop
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	40021000 	.word	0x40021000
 80001e4:	40010c00 	.word	0x40010c00
 80001e8:	40005400 	.word	0x40005400

080001ec <I2C1_Master_Transmit>:
    (void)I2C1->SR2; // Clear ADDR
    I2C1->CR1 |= I2C_CR1_STOP;
    return 1; // Ready
}

void I2C1_Master_Transmit(uint8_t slaveAddr, uint8_t *data, uint8_t length) {
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	6039      	str	r1, [r7, #0]
 80001f6:	71fb      	strb	r3, [r7, #7]
 80001f8:	4613      	mov	r3, r2
 80001fa:	71bb      	strb	r3, [r7, #6]
    I2C1->CR1 |= I2C_CR1_START;
 80001fc:	4b21      	ldr	r3, [pc, #132]	@ (8000284 <I2C1_Master_Transmit+0x98>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a20      	ldr	r2, [pc, #128]	@ (8000284 <I2C1_Master_Transmit+0x98>)
 8000202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000206:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8000208:	bf00      	nop
 800020a:	4b1e      	ldr	r3, [pc, #120]	@ (8000284 <I2C1_Master_Transmit+0x98>)
 800020c:	695b      	ldr	r3, [r3, #20]
 800020e:	f003 0301 	and.w	r3, r3, #1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0f9      	beq.n	800020a <I2C1_Master_Transmit+0x1e>

    I2C1->DR = (slaveAddr << 1);
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	4a1a      	ldr	r2, [pc, #104]	@ (8000284 <I2C1_Master_Transmit+0x98>)
 800021a:	005b      	lsls	r3, r3, #1
 800021c:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800021e:	bf00      	nop
 8000220:	4b18      	ldr	r3, [pc, #96]	@ (8000284 <I2C1_Master_Transmit+0x98>)
 8000222:	695b      	ldr	r3, [r3, #20]
 8000224:	f003 0302 	and.w	r3, r3, #2
 8000228:	2b00      	cmp	r3, #0
 800022a:	d0f9      	beq.n	8000220 <I2C1_Master_Transmit+0x34>
    (void)I2C1->SR2;
 800022c:	4b15      	ldr	r3, [pc, #84]	@ (8000284 <I2C1_Master_Transmit+0x98>)
 800022e:	699b      	ldr	r3, [r3, #24]

    for (uint8_t i = 0; i < length; i++) {
 8000230:	2300      	movs	r3, #0
 8000232:	73fb      	strb	r3, [r7, #15]
 8000234:	e00f      	b.n	8000256 <I2C1_Master_Transmit+0x6a>
        while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000236:	bf00      	nop
 8000238:	4b12      	ldr	r3, [pc, #72]	@ (8000284 <I2C1_Master_Transmit+0x98>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000240:	2b00      	cmp	r3, #0
 8000242:	d0f9      	beq.n	8000238 <I2C1_Master_Transmit+0x4c>
        I2C1->DR = data[i];
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	4413      	add	r3, r2
 800024a:	781a      	ldrb	r2, [r3, #0]
 800024c:	4b0d      	ldr	r3, [pc, #52]	@ (8000284 <I2C1_Master_Transmit+0x98>)
 800024e:	611a      	str	r2, [r3, #16]
    for (uint8_t i = 0; i < length; i++) {
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	3301      	adds	r3, #1
 8000254:	73fb      	strb	r3, [r7, #15]
 8000256:	7bfa      	ldrb	r2, [r7, #15]
 8000258:	79bb      	ldrb	r3, [r7, #6]
 800025a:	429a      	cmp	r2, r3
 800025c:	d3eb      	bcc.n	8000236 <I2C1_Master_Transmit+0x4a>
    }

    while (!(I2C1->SR1 & I2C_SR1_BTF));
 800025e:	bf00      	nop
 8000260:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <I2C1_Master_Transmit+0x98>)
 8000262:	695b      	ldr	r3, [r3, #20]
 8000264:	f003 0304 	and.w	r3, r3, #4
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0f9      	beq.n	8000260 <I2C1_Master_Transmit+0x74>
    I2C1->CR1 |= I2C_CR1_STOP;
 800026c:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <I2C1_Master_Transmit+0x98>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <I2C1_Master_Transmit+0x98>)
 8000272:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000276:	6013      	str	r3, [r2, #0]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40005400 	.word	0x40005400

08000288 <I2C1_Master_Receive>:

void I2C1_Master_Receive(uint8_t slaveAddr, uint8_t *buffer, uint8_t length) {
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	6039      	str	r1, [r7, #0]
 8000292:	71fb      	strb	r3, [r7, #7]
 8000294:	4613      	mov	r3, r2
 8000296:	71bb      	strb	r3, [r7, #6]
    I2C1->CR1 |= I2C_CR1_START;
 8000298:	4b1f      	ldr	r3, [pc, #124]	@ (8000318 <I2C1_Master_Receive+0x90>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a1e      	ldr	r2, [pc, #120]	@ (8000318 <I2C1_Master_Receive+0x90>)
 800029e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002a2:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 80002a4:	bf00      	nop
 80002a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000318 <I2C1_Master_Receive+0x90>)
 80002a8:	695b      	ldr	r3, [r3, #20]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <I2C1_Master_Receive+0x1e>

    I2C1->DR = (slaveAddr << 1) | 1;
 80002b2:	79fb      	ldrb	r3, [r7, #7]
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	f043 0201 	orr.w	r2, r3, #1
 80002ba:	4b17      	ldr	r3, [pc, #92]	@ (8000318 <I2C1_Master_Receive+0x90>)
 80002bc:	611a      	str	r2, [r3, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80002be:	bf00      	nop
 80002c0:	4b15      	ldr	r3, [pc, #84]	@ (8000318 <I2C1_Master_Receive+0x90>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	f003 0302 	and.w	r3, r3, #2
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d0f9      	beq.n	80002c0 <I2C1_Master_Receive+0x38>
    (void)I2C1->SR2;
 80002cc:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <I2C1_Master_Receive+0x90>)
 80002ce:	699b      	ldr	r3, [r3, #24]

    for (uint8_t i = 0; i < length; i++) {
 80002d0:	2300      	movs	r3, #0
 80002d2:	73fb      	strb	r3, [r7, #15]
 80002d4:	e010      	b.n	80002f8 <I2C1_Master_Receive+0x70>
        while (!(I2C1->SR1 & I2C_SR1_RXNE));
 80002d6:	bf00      	nop
 80002d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <I2C1_Master_Receive+0x90>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0f9      	beq.n	80002d8 <I2C1_Master_Receive+0x50>
        buffer[i] = I2C1->DR;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <I2C1_Master_Receive+0x90>)
 80002e6:	6919      	ldr	r1, [r3, #16]
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	683a      	ldr	r2, [r7, #0]
 80002ec:	4413      	add	r3, r2
 80002ee:	b2ca      	uxtb	r2, r1
 80002f0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	3301      	adds	r3, #1
 80002f6:	73fb      	strb	r3, [r7, #15]
 80002f8:	7bfa      	ldrb	r2, [r7, #15]
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d3ea      	bcc.n	80002d6 <I2C1_Master_Receive+0x4e>
    }

    I2C1->CR1 |= I2C_CR1_STOP;
 8000300:	4b05      	ldr	r3, [pc, #20]	@ (8000318 <I2C1_Master_Receive+0x90>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a04      	ldr	r2, [pc, #16]	@ (8000318 <I2C1_Master_Receive+0x90>)
 8000306:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800030a:	6013      	str	r3, [r2, #0]
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40005400 	.word	0x40005400

0800031c <I2C1_Slave_Transmit>:

void I2C1_Slave_Transmit(uint8_t *data, uint8_t length) {
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	70fb      	strb	r3, [r7, #3]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000328:	bf00      	nop
 800032a:	4b16      	ldr	r3, [pc, #88]	@ (8000384 <I2C1_Slave_Transmit+0x68>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f003 0302 	and.w	r3, r3, #2
 8000332:	2b00      	cmp	r3, #0
 8000334:	d0f9      	beq.n	800032a <I2C1_Slave_Transmit+0xe>
    (void)I2C1->SR2;
 8000336:	4b13      	ldr	r3, [pc, #76]	@ (8000384 <I2C1_Slave_Transmit+0x68>)
 8000338:	699b      	ldr	r3, [r3, #24]

    for (uint8_t i = 0; i < length; i++) {
 800033a:	2300      	movs	r3, #0
 800033c:	73fb      	strb	r3, [r7, #15]
 800033e:	e00f      	b.n	8000360 <I2C1_Slave_Transmit+0x44>
        while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000340:	bf00      	nop
 8000342:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <I2C1_Slave_Transmit+0x68>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800034a:	2b00      	cmp	r3, #0
 800034c:	d0f9      	beq.n	8000342 <I2C1_Slave_Transmit+0x26>
        I2C1->DR = data[i];
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	4413      	add	r3, r2
 8000354:	781a      	ldrb	r2, [r3, #0]
 8000356:	4b0b      	ldr	r3, [pc, #44]	@ (8000384 <I2C1_Slave_Transmit+0x68>)
 8000358:	611a      	str	r2, [r3, #16]
    for (uint8_t i = 0; i < length; i++) {
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	3301      	adds	r3, #1
 800035e:	73fb      	strb	r3, [r7, #15]
 8000360:	7bfa      	ldrb	r2, [r7, #15]
 8000362:	78fb      	ldrb	r3, [r7, #3]
 8000364:	429a      	cmp	r2, r3
 8000366:	d3eb      	bcc.n	8000340 <I2C1_Slave_Transmit+0x24>
    }

    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000368:	bf00      	nop
 800036a:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <I2C1_Slave_Transmit+0x68>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f003 0304 	and.w	r3, r3, #4
 8000372:	2b00      	cmp	r3, #0
 8000374:	d0f9      	beq.n	800036a <I2C1_Slave_Transmit+0x4e>
}
 8000376:	bf00      	nop
 8000378:	bf00      	nop
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40005400 	.word	0x40005400

08000388 <I2C1_Mem_Write>:
        while (!(I2C1->SR1 & I2C_SR1_RXNE));
        buffer[i] = I2C1->DR;
    }
}

void I2C1_Mem_Write(uint8_t slaveAddr, uint8_t memAddr, uint8_t *data, uint8_t length) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	603a      	str	r2, [r7, #0]
 8000390:	461a      	mov	r2, r3
 8000392:	4603      	mov	r3, r0
 8000394:	71fb      	strb	r3, [r7, #7]
 8000396:	460b      	mov	r3, r1
 8000398:	71bb      	strb	r3, [r7, #6]
 800039a:	4613      	mov	r3, r2
 800039c:	717b      	strb	r3, [r7, #5]
    I2C1_Master_Transmit(slaveAddr, &memAddr, 1);
 800039e:	1db9      	adds	r1, r7, #6
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	2201      	movs	r2, #1
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff21 	bl	80001ec <I2C1_Master_Transmit>
    I2C1_Master_Transmit(slaveAddr, data, length);
 80003aa:	797a      	ldrb	r2, [r7, #5]
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	6839      	ldr	r1, [r7, #0]
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff1b 	bl	80001ec <I2C1_Master_Transmit>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <I2C1_Mem_Read>:

void I2C1_Mem_Read(uint8_t slaveAddr, uint8_t memAddr, uint8_t *buffer, uint8_t length) {
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	603a      	str	r2, [r7, #0]
 80003c6:	461a      	mov	r2, r3
 80003c8:	4603      	mov	r3, r0
 80003ca:	71fb      	strb	r3, [r7, #7]
 80003cc:	460b      	mov	r3, r1
 80003ce:	71bb      	strb	r3, [r7, #6]
 80003d0:	4613      	mov	r3, r2
 80003d2:	717b      	strb	r3, [r7, #5]
    I2C1_Master_Transmit(slaveAddr, &memAddr, 1);
 80003d4:	1db9      	adds	r1, r7, #6
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	2201      	movs	r2, #1
 80003da:	4618      	mov	r0, r3
 80003dc:	f7ff ff06 	bl	80001ec <I2C1_Master_Transmit>
    I2C1_Master_Receive(slaveAddr, buffer, length);
 80003e0:	797a      	ldrb	r2, [r7, #5]
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	6839      	ldr	r1, [r7, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff ff4e 	bl	8000288 <I2C1_Master_Receive>
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <main>:
#include "i2c.h"

int main(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
    I2C1_Init();
 80003fa:	f7ff feb9 	bl	8000170 <I2C1_Init>
//        I2C1_Master_Transmit(0x50, &dataToWrite, 1);
//        I2C1_Master_Receive(0x50, &receivedData, 1);
//    }

    // Memory Read/Write Example
    uint8_t memoryData[2] = {0x12, 0x34};
 80003fe:	f243 4312 	movw	r3, #13330	@ 0x3412
 8000402:	80bb      	strh	r3, [r7, #4]
    uint8_t readBuffer[2];

    I2C1_Mem_Write(0x6A, 0x10, memoryData, 2);
 8000404:	1d3a      	adds	r2, r7, #4
 8000406:	2302      	movs	r3, #2
 8000408:	2110      	movs	r1, #16
 800040a:	206a      	movs	r0, #106	@ 0x6a
 800040c:	f7ff ffbc 	bl	8000388 <I2C1_Mem_Write>
    I2C1_Mem_Read(0x50, 0x10, readBuffer, 2);
 8000410:	463a      	mov	r2, r7
 8000412:	2302      	movs	r3, #2
 8000414:	2110      	movs	r1, #16
 8000416:	2050      	movs	r0, #80	@ 0x50
 8000418:	f7ff ffd1 	bl	80003be <I2C1_Mem_Read>
    I2C1_Slave_Transmit(memoryData, sizeof(memoryData)-1);
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2101      	movs	r1, #1
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ff7b 	bl	800031c <I2C1_Slave_Transmit>

    while (1);
 8000426:	bf00      	nop
 8000428:	e7fd      	b.n	8000426 <main+0x32>
	...

0800042c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800042c:	480d      	ldr	r0, [pc, #52]	@ (8000464 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800042e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000430:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000434:	480c      	ldr	r0, [pc, #48]	@ (8000468 <LoopForever+0x6>)
  ldr r1, =_edata
 8000436:	490d      	ldr	r1, [pc, #52]	@ (800046c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000438:	4a0d      	ldr	r2, [pc, #52]	@ (8000470 <LoopForever+0xe>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800043c:	e002      	b.n	8000444 <LoopCopyDataInit>

0800043e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000442:	3304      	adds	r3, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000448:	d3f9      	bcc.n	800043e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044a:	4a0a      	ldr	r2, [pc, #40]	@ (8000474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800044c:	4c0a      	ldr	r4, [pc, #40]	@ (8000478 <LoopForever+0x16>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000450:	e001      	b.n	8000456 <LoopFillZerobss>

08000452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000454:	3204      	adds	r2, #4

08000456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000458:	d3fb      	bcc.n	8000452 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800045a:	f000 f811 	bl	8000480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800045e:	f7ff ffc9 	bl	80003f4 <main>

08000462 <LoopForever>:

LoopForever:
  b LoopForever
 8000462:	e7fe      	b.n	8000462 <LoopForever>
  ldr   r0, =_estack
 8000464:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800046c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000470:	080004e8 	.word	0x080004e8
  ldr r2, =_sbss
 8000474:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000478:	2000001c 	.word	0x2000001c

0800047c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800047c:	e7fe      	b.n	800047c <ADC1_2_IRQHandler>
	...

08000480 <__libc_init_array>:
 8000480:	b570      	push	{r4, r5, r6, lr}
 8000482:	2600      	movs	r6, #0
 8000484:	4d0c      	ldr	r5, [pc, #48]	@ (80004b8 <__libc_init_array+0x38>)
 8000486:	4c0d      	ldr	r4, [pc, #52]	@ (80004bc <__libc_init_array+0x3c>)
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	10a4      	asrs	r4, r4, #2
 800048c:	42a6      	cmp	r6, r4
 800048e:	d109      	bne.n	80004a4 <__libc_init_array+0x24>
 8000490:	f000 f81a 	bl	80004c8 <_init>
 8000494:	2600      	movs	r6, #0
 8000496:	4d0a      	ldr	r5, [pc, #40]	@ (80004c0 <__libc_init_array+0x40>)
 8000498:	4c0a      	ldr	r4, [pc, #40]	@ (80004c4 <__libc_init_array+0x44>)
 800049a:	1b64      	subs	r4, r4, r5
 800049c:	10a4      	asrs	r4, r4, #2
 800049e:	42a6      	cmp	r6, r4
 80004a0:	d105      	bne.n	80004ae <__libc_init_array+0x2e>
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
 80004a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a8:	4798      	blx	r3
 80004aa:	3601      	adds	r6, #1
 80004ac:	e7ee      	b.n	800048c <__libc_init_array+0xc>
 80004ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b2:	4798      	blx	r3
 80004b4:	3601      	adds	r6, #1
 80004b6:	e7f2      	b.n	800049e <__libc_init_array+0x1e>
 80004b8:	080004e0 	.word	0x080004e0
 80004bc:	080004e0 	.word	0x080004e0
 80004c0:	080004e0 	.word	0x080004e0
 80004c4:	080004e4 	.word	0x080004e4

080004c8 <_init>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	bf00      	nop
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr

080004d4 <_fini>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	bf00      	nop
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr
